"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var net_1 = __importDefault(require("net"));
var lodash_1 = __importDefault(require("lodash"));
var debug_1 = __importDefault(require("debug"));
var chalk_1 = __importDefault(require("chalk"));
var wait_queue_1 = __importDefault(require("wait-queue"));
var SmtpClient = /** @class */ (function () {
    function SmtpClient(options) {
        this.options = options;
        this.queue = new wait_queue_1.default();
        this.debug = debug_1.default.debug("smtp");
    }
    SmtpClient.prototype.connect = function () {
        var _this = this;
        var _a;
        this.debug(chalk_1.default.bold.cyanBright("||") + " connect");
        var _options = __assign(__assign({}, this.options), { port: (_a = this.options.port, (_a !== null && _a !== void 0 ? _a : 25)) });
        this.client = net_1.default.createConnection(_options);
        this.client.on("data", (function (data) {
            _this.queue.push(data.toString());
        }));
        this.client.on("end", function () {
            _this.debug("END");
        });
        this.client.on("error", function (err) {
            _this.debug("ERROR");
            if (_this.debug.enabled)
                console.error(err);
        });
        return this.read();
    };
    SmtpClient.prototype.close = function () {
        var _this = this;
        if (!this.client)
            return;
        var _client = this.client;
        this.client.end(function () { _client.destroy(); _this.debug(chalk_1.default.bold.cyanBright("||") + " closed"); });
        this.client = undefined;
    };
    SmtpClient.prototype.helo = function (value) {
        return this.write("HELO " + value);
    };
    SmtpClient.prototype.from = function (value) {
        return this.write("MAIL FROM: <" + value + ">");
    };
    SmtpClient.prototype.to = function (value) {
        return this.write("RCPT TO: <" + value + ">");
    };
    SmtpClient.prototype.write = function (msg) {
        if (!this.client)
            throw new Error("client is null");
        this.debug(chalk_1.default.bold.blueBright(">>") + " " + chalk_1.default.white(msg));
        this.client.write(msg + "\r\n");
        return this.read();
    };
    SmtpClient.prototype.read = function () {
        return __awaiter(this, void 0, void 0, function () {
            var line, indented, code, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queue.shift()];
                    case 1:
                        line = _a.sent();
                        if (this.debug.enabled) {
                            indented = line.split("\r\n").filter(function (value) { return !lodash_1.default.isEmpty(value); }).join("\r\n   ");
                            this.debug(chalk_1.default.bold.redBright("<<") + " " + chalk_1.default.white(indented));
                        }
                        code = parseInt(line.substr(0, 3));
                        message = line.substr(4) // good enough for now
                        ;
                        return [2 /*return*/, { code: code, message: message }];
                }
            });
        });
    };
    return SmtpClient;
}());
exports.SmtpClient = SmtpClient;
